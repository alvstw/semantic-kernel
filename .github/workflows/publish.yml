name: publish to nuget
on:
  push:
    branches:
      - main
permissions:
  packages: write
jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        configuration: [ Release, Debug ]
    runs-on: ${{ matrix.os }}
    env:
      NUGET_CERT_REVOCATION_MODE: offline
    steps:
      - uses: actions/checkout@v3
        with:
          clean: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GPR_READ_TOKEN }}

      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Update project versions
        shell: bash
        run: |
          allProjectFiles=$(find ./dotnet -type f -name "*.csproj" | tr '\n' ' ');
          if [ $? -ne 0 ]; then exit 1; fi
          echo "$allProjectFiles"
          propsFile="./dotnet/nuget/nuget-package.props"
          
          buildAndRevisionNumber="${{ github.run_number }}.${{ github.run_attempt }}"
          echo "buildAndRevisionNumber: $buildAndRevisionNumber"
          for file in $allProjectFiles; do
          ./.github/workflows/update-version.sh --file $file --propsFile $propsFile --buildAndRevisionNumber $buildAndRevisionNumber
          done
      - name: Find solutions
        shell: bash
        run: echo "solutions=$(find ./dotnet -type f -name "*.sln" | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Restore dependencies
        shell: bash
        run: |
          for solution in ${{ env.solutions }}; do
            dotnet restore $solution
          done
      - name: Build
        shell: bash
        run: |
          for solution in ${{ env.solutions }}; do
            dotnet build $solution --no-restore --configuration ${{ matrix.configuration }}
          done
      - name: Find unit test projects
        shell: bash
        run: echo "projects=$(find ./dotnet -type f -name "*.Test.csproj" | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Test
        shell: bash
        run: |
          for project in ${{ env.projects }}; do
              dotnet test $project --no-build --verbosity normal --logger trx --results-directory ./TestResults --configuration ${{ matrix.configuration }}
          done
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-testresults-${{ matrix.configuration }}
          path: ./TestResults
        if: ${{ always() }}

      - name: Stage artifacts
        shell: bash
        run: mkdir ./out; find . | grep "/bin/" | xargs cp -r --parents -t ./out
        if: ${{ github.event_name == 'push' }}

      - name: Archive artifacts ${{ matrix.os }}-${{ matrix.configuration }}
        uses: actions/upload-artifact@v3
        with:
          name: drop-${{ matrix.os }}-${{ matrix.configuration }}
          path: ./out
        if: ${{ github.event_name == 'push' }}

  publish-nuget:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    if: ${{ github.event_name == 'push' }}
    steps:
      # Pull all nuget packages (*.nupkg) and the accompanying symbols packages (*.snupkg)
      - uses: actions/download-artifact@v3
        with:
          name: drop-ubuntu-latest-Release
          path: ./out/dotnet/**/*nupkg

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Find nupkg files
        shell: bash
        run: echo "nuget_packages=$(find ./out/dotnet -type f -name "*nupkg" | tr '\n' ' ')" >> $GITHUB_ENV

      # Publish NuGet to GitHub Package Repository
      # This will publish both the nuget package (*.nupkg) and the accompanying symbols (*.snupkg).
      - name: Publish to GitHub package repository
        shell: bash
        run: |
          for nupkg in ${{ env.nuget_packages }}; do
            dotnet nuget push $nupkg \
              --api-key ${{ secrets.GITHUB_TOKEN }} \
              --source https://nuget.pkg.github.com/${{ github.repository_owner }} \
              --skip-duplicate
          done